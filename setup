sudo hostnamectl set-hostname "manager_machine"                             #(optional)execute exit & relogin

sudo hostnamectl set-hostname "worker_machine_one"                          #(optional)execute exit & relogin

sudo hostnamectl set-hostname "worker_machine_two"                          #(optional)execute exit & relogin

# Execute in all Three machine

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 

sudo add-apt-repository    "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

sudo apt-get update

sudo apt-get install -y docker.io kubelet kubeadm kubectl                     #Install docker.io from web instructions

sudo apt-mark hold docker-ce kubelet kubeadm kubectl                          Hold the version, as kubernetes is version sensitive

echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf    add iptables

sudo sysctl -p                                                                restarting the process

sudo mkdir /etc/docker
cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF                                                         add some networking instruction on daemon.json
sudo systemctl enable docker                                #if server restart then docker will automatically starts
sudo systemctl daemon-reload
sudo systemctl restart docker

#On manager machine run the below code
sudo kubeadm init --pod-network-cidr=10.244.0.0/16

#Run only if error comes for NumCPU and Mem
sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=NumCPU,Mem

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml   # will create network

#Run on worker machine with the above token generated allow 6443 in firewall
sudo kubeadm join 172.31.4.161:6443 --token 0y52t6.ffsj8jkjfcl1sq8h \
   --discovery-token-ca-cert-hash sha256:7aa1825042d19d3e567f7e4b447634e942fe9ed7f18f78464a9c05f451551ed5

# run on manager machine check all nodes
kubectl get nodes


#The connection to the server localhost:8080 was refused - did you specify the right host or port?
systemctl stop kubelet
systemctl start kubelet
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml   # will create network


#if error comes [ERROR CRI]: container runtime is not running: output
rm /etc/containerd/config.toml
systemctl restart containerd                      


#The connection to the server localhost:8080 was refused - did you specify the right host or port?
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
